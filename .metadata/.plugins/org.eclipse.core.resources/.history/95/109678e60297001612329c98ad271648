
// Copyright (C) 2014 by Klaus Jung
// All rights reserved.
// Date: 2014-10-02

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Random;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.html.HTMLDocument.Iterator;

public class FloodFilling extends JPanel {

	private static final long serialVersionUID = 1L;
	private static final int border = 10;
	private static final int maxWidth = 400;
	private static final int maxHeight = 400;
	private static final int BLACK = Utils.ARGB_BLACK;
	private static final int WHITE = Utils.ARGB_WHITE;
	private static final File openPath = new File(".");
	private static final String title = "Binarisierung";
	private static final String author = "Spangehl";
	private static final String initalOpen = "tools1.png";
	private static final Stack<Integer> stack = new Stack<Integer>();
	private static final Queue queue = new LinkedList();
	private static final Random rand = new Random();
	private static final float r = rand.nextFloat();
	private static final float g = rand.nextFloat();
	private static final float b = rand.nextFloat();

	static final int TH_MIN = 0;
	static final int TH_MAX = 255;
	static final int TH_INIT = 128;
	private int[] histogram = new int[256];
	private int[] originalPic;

	private static JFrame frame;

	private static ImageView srcView; // source image view
	private static ImageView dstView; // binarized image view

	private JComboBox<String> methodList; // the selected binarization method
	private JLabel statusLine; // to print some status text
	private JSlider slider;
	private static JCheckBox outlineBox = new JCheckBox("Outline");
	private static int threshold = 128; // value for slider

	public FloodFilling() {
		super(new BorderLayout(border, border));

		// load the default image
		File input = new File(initalOpen);

		if (!input.canRead())
			input = openFile(); // file not found, choose another image

		srcView = new ImageView(input);
		srcView.setMaxSize(new Dimension(maxWidth, maxHeight));
		// create an empty destination image
		dstView = new ImageView(srcView.getImgWidth(), srcView.getImgHeight());
		dstView.setMaxSize(new Dimension(maxWidth, maxHeight));

		// load image button
		JButton load = new JButton("Bild öffnen");
		load.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				File input = openFile();
				if (input != null) {
					srcView.loadImage(input);
					srcView.setMaxSize(new Dimension(maxWidth, maxHeight));
					floodImage();
				}
			}
		});

		// selector for the binarization method
		JLabel methodText = new JLabel("Methode:");
		String[] methodNames = { "Depth First", "Breadth First", "Sequentiell" };

		methodList = new JComboBox<String>(methodNames);
		methodList.setSelectedIndex(0); // set initial method
		methodList.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				floodImage();
			}
		});

		// some status text
		statusLine = new JLabel("Wir suchen nach Bildregionen!");
	

		// arrange all controls
		JPanel controls = new JPanel(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new Insets(0, border, 0, 0);
		controls.add(load, c);
		controls.add(methodText, c);
		controls.add(methodList, c);

		JPanel images = new JPanel(new FlowLayout());
		images.add(srcView);
		images.add(dstView);

		add(controls, BorderLayout.NORTH);
		add(images, BorderLayout.CENTER);
		add(statusLine, BorderLayout.SOUTH);

		setBorder(BorderFactory.createEmptyBorder(border, border, border, border));

	}

	

	


	protected void reverse() {
		dstView.setPixels(originalPic, srcView.getImgWidth(), srcView.getImgHeight());
		frame.pack();

	}

	private File openFile() {
		JFileChooser chooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Images (*.jpg, *.png, *.gif)", "jpg", "png",
				"gif");
		chooser.setFileFilter(filter);
		chooser.setCurrentDirectory(openPath);
		int ret = chooser.showOpenDialog(this);
		if (ret == JFileChooser.APPROVE_OPTION) {
			frame.setTitle(title + chooser.getSelectedFile().getName());
			return chooser.getSelectedFile();
		}
		return null;
	}

	private static void createAndShowGUI() {
		// create and setup the window
		frame = new JFrame(title + " - " + author + " - " + initalOpen);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JComponent newContentPane = new FloodFilling();
		newContentPane.setOpaque(true); // content panes must be opaque
		frame.setContentPane(newContentPane);

		// display the window.
		frame.pack();
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Dimension screenSize = toolkit.getScreenSize();
		frame.setLocation((screenSize.width - frame.getWidth()) / 2, (screenSize.height - frame.getHeight()) / 2);
		frame.setVisible(true);
	}

	public static void main(String[] args) {
		// Schedule a job for the event-dispatching thread:
		// creating and showing this application's GUI.
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				createAndShowGUI();
			}
		});
	}

	protected void floodImage() {

		String methodName = (String) methodList.getSelectedItem();

		// image dimensions
		int width = srcView.getImgWidth();
		int height = srcView.getImgHeight();

		// get pixels arrays
		int srcPixels[] = srcView.getPixels();
		int dstPixels[] = java.util.Arrays.copyOf(srcPixels, srcPixels.length);

		String message = "Auffinden von Bildregionen mit \"" + methodName + "\"";

		statusLine.setText(message);

		long startTime = System.currentTimeMillis();

		switch (methodList.getSelectedIndex()) {
		case 0: // DepthFirst
			int threshold = ThreadLocalRandom.current().nextInt(1, 255 + 1);
			threshold = isoData(srcPixels, threshold);
			binarize(dstPixels, threshold);
			depthFirst(dstPixels);
			break;
		case 1: // BreadthFirst
			binarize(dstPixels, threshold);
			breadthFirst(dstPixels);
			break;
		case 2: //Sequentiell
			seqRegion();
			break;
		}

		long time = System.currentTimeMillis() - startTime;

		dstView.setPixels(dstPixels, width, height);

		// dstView.saveImage("out.png");

		frame.pack();

		statusLine.setText(message + " in " + time + " ms");
	}
	
	private void depthFirst(int[] pixels) {
		for(int i=0; i < pixels.length; i++){
			if(pixels[i] == BLACK){
				pixels[i] = (int) randomColour(r, g, b);
				pushStack(pixels, i);
				while(!stack.empty()){
					pushStack(pixels, (int)stack.pop());
				}
				
			}
		}
	}
	
	
	
	private Object randomColour(float r, float g, float b) {
		Color randomColor = new Color(r, g, b);
		return rabdomColor;
	}
	//pusht die nachbarschaftspixel in den stack
	private void pushStack(int[] pixels, int pixel){
		int[] neighbourhood = getNeighbours(pixels, pixel, 8);
		for(int j = 0; j<neighbourhood.length; j++){
			stack.push(neighbourhood[j]);
		}
	}
	
	//pusht die nachbarschaftspixel in die queue
		private void addQueue(int[] pixels, int pixel){
			int[] neighbourhood = getNeighbours(pixels, pixel, 8);
			for(int j = 0; j<neighbourhood.length; j++){
				queue.add(neighbourhood[j]);
			}
		}

	/*gibt die nachbarschafts-pixel als array zurück
	 * aber nicht das zu bearbeitende pixel selbst
	 * 
	 */
	
	private int[] getNeighbours(int[] pixels, int pixelPos, int kernelSize) {
		int[] neighbours = new int[kernelSize];
		int neighbourcount = 0;

		int[] xY = getPixelPos(pixelPos, srcView.getImgWidth()); //gibt x, y koordinaten als array zurück
		int r = (kernelSize - 1) / 2;

		int xStart = xY[0] - r;
		int yStart = xY[1] - r;

		int curPosX;
		int curPosY;

		for (int j = 0; j < kernelSize; j++) { // geht über die reihen (y)

			curPosY = yStart + j;
			// randbehandlung
			if (curPosY < 0) {
				curPosY = 0;
			}
			if (curPosY >= srcView.getHeight()) {
				curPosY = srcView.getHeight() - 1;
			}

			for (int i = 0; i < kernelSize; i++) { // geht über die zeilen (x)
				curPosX = xStart + i;
				// randbehandlung
				if (curPosX < 0) {
					curPosX = 0;
				}
				if (curPosX >= srcView.getImgWidth()) {
					curPosX = srcView.getImgWidth() - 1;
				}
				//x, y koordinaten in eindimensionale koordinate zurückverwandeln und diese im neighbour array zwischenspeichern
				if(xY[0] != i && xY[1] != j){
					neighbours[neighbourcount] = Utils.pixelPosSafe(i, j, srcView.getImgWidth(), srcView.getImgHeight());
					neighbourcount++;
				}

			}
		}
		return neighbours;
	}
	
	//berechnet x und y koordinaten for i in eindimensionalem array
	private int[] getPixelPos(int pixelPos, int width){
		int[] xY = new int[2];
		xY[0] = pixelPos % width; //x
		xY[1] = pixelPos / width; //y
		//System.out.println(xY[0] + '&' +  xY[1]);
		return xY;
	}

	private void breadthFirst(int[] pixels) {
		for(int i=0; i < pixels.length; i++){
			if(pixels[i] == BLACK){
				pixels[i] = (int) randomColour(r, g, b);
				addQueue(pixels, i);
				while(!queue.isEmpty()){
					addQueue(pixels, (int)queue.remove());
				}
				
			}
		}
		
	}

	private void seqRegion() {
		// TODO Auto-generated method stub
		
	}

	private int isoData(int[] pixels, int initialThreshold) {
		createHist(pixels);
		int newThreshold = 0;
		double weightedSumLower = 0;
		double pointsLower = 0;
		for (int i = 0; i < initialThreshold; i++) {
			weightedSumLower += histogram[i] * i;
			pointsLower += histogram[i];
		}
		double weightedSumUpper = 0;
		double pointsUpper = 0;
		for (int i = initialThreshold; i < histogram.length; i++) {
			weightedSumUpper += histogram[i] * i;
			pointsUpper += histogram[i];
		}
		double meanLower = weightedSumLower / pointsLower;
		double meanUpper = weightedSumUpper / pointsUpper;
		newThreshold = (int) (meanLower + meanUpper) / 2;
		if (newThreshold != initialThreshold)
			return isoData(pixels, newThreshold);
		return newThreshold;

	}

	private void createHist(int[] pixels) {
		for (int i = 0; i < pixels.length; i++) {
			int gray = ((pixels[i] & 0xff) + ((pixels[i] & 0xff00) >> 8) + ((pixels[i] & 0xff0000) >> 16)) / 3;
			histogram[gray]++;
		}
	}

	void binarize(int pixels[], int treshold) {
		for (int i = 0; i < pixels.length; i++) {
			int gray = ((pixels[i] & 0xff) + ((pixels[i] & 0xff00) >> 8) + ((pixels[i] & 0xff0000) >> 16)) / 3;
			pixels[i] = gray < treshold ? 0xff000000 : 0xffffffff;
		}
	}

	
	
	

	


}